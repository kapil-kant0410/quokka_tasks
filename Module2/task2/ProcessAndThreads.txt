Process & Threads in Java

1. Thread Creation
   Threads in Java can be created in two main ways:

    1.Extending the Thread class

    Create a class that extends Thread.
    Override the run() method.
    Create an instance of the class and call start().

    class MyThread extends Thread {
    public void run() {
        System.out.println("Thread is running");
    }
    }

    public class Main {
    public static void main(String[] args) {
        MyThread t1 = new MyThread();
        t1.start();
    }
    }
 
    2.Implementing the Runnable interface

    Create a class that implements Runnable.
    Implement the run() method.
    Pass an instance of the class to a Thread object and call start().
    

    class MyRunnable implements Runnable {
    public void run() {
        System.out.println("Thread is running");
    }
    }

    public class Main {
    public static void main(String[] args) {
        Thread t1 = new Thread(new MyRunnable());
        t1.start();
    }
    }


2. Thread Lifecycle
    A thread in Java goes through several states:

    New – Created but not started yet.
    Runnable – Ready to run but waiting for CPU allocation.
    Running – Actively executing.
    Blocked – Waiting for a resource (e.g., trying to enter a synchronized block).
    Waiting – Indefinitely waiting for another thread to notify it.
    Timed Waiting – Waiting for a specific amount of time (e.g., sleep(), join(time)).
    Terminated – Completed execution or stopped due to an exception.
   
    class MyThread extends Thread {
    public void run() {
        try {
            Thread.sleep(1000); // Timed Waiting
            System.out.println("Running Thread");
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    }

    public class Main {
    public static void main(String[] args) {
        MyThread t1 = new MyThread();
        System.out.println("Thread State: " + t1.getState()); // NEW
        t1.start();
        System.out.println("Thread State: " + t1.getState()); // RUNNABLE
    }
    }

3. Synchronization & Locks

    Multiple threads can access shared resources, which may cause data inconsistency. Synchronization ensures that only one thread accesses a critical section at a time.

    1.Synchronized method – Locks the entire method.


    class SharedResource {
    synchronized void printNumbers() {
        for (int i = 1; i <= 5; i++) {
            System.out.println(i);
            try { Thread.sleep(500); } catch (InterruptedException e) {}
        }
    }
    }

    class MyThread extends Thread {
    SharedResource obj;
    MyThread(SharedResource obj) { this.obj = obj; }
    public void run() { obj.printNumbers(); }
    }

    public class Main {
    public static void main(String[] args) {
        SharedResource obj = new SharedResource();
        MyThread t1 = new MyThread(obj);
        MyThread t2 = new MyThread(obj);
        t1.start();
        t2.start();
    }
    }

    2.Synchronized block – Locks only a specific part of the method.


    class SharedResource {
    void printNumbers() {
        synchronized (this) {
            for (int i = 1; i <= 5; i++) {
                System.out.println(i);
                try { Thread.sleep(500); } catch (InterruptedException e) {}
            }
        }
    }
    }

    3.Locks (ReentrantLock) – More flexible than synchronized.


    import java.util.concurrent.locks.ReentrantLock;

    class SharedResource {
    private final ReentrantLock lock = new ReentrantLock();

    void printNumbers() {
        lock.lock();
        try {
            for (int i = 1; i <= 5; i++) {
                System.out.println(i);
                Thread.sleep(500);
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            lock.unlock();
        }
    }
    }


4. Executors
   The Executors framework in Java provides a better way to manage multiple threads instead of manually creating them.

   1.Fixed Thread Pool – Creates a pool of fixed-size threads.


   import java.util.concurrent.ExecutorService;
   import java.util.concurrent.Executors;

   class Task implements Runnable {
    public void run() {
        System.out.println("Thread: " + Thread.currentThread().getName());
    }
    }

    public class Main {
    public static void main(String[] args) {
        ExecutorService executor = Executors.newFixedThreadPool(3);
        for (int i = 0; i < 5; i++) {
            executor.execute(new Task());
        }
        executor.shutdown();
    }
    }


    2.Cached Thread Pool – Creates new threads as needed and reuses old ones.

    ExecutorService executor = Executors.newCachedThreadPool();


    3.Scheduled Thread Pool – Runs tasks at a fixed delay or interval.

    import java.util.concurrent.Executors;
    import java.util.concurrent.ScheduledExecutorService;
    import java.util.concurrent.TimeUnit;

    public class Main {
    public static void main(String[] args) {
        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(2);
        scheduler.schedule(() -> System.out.println("Task executed"), 3, TimeUnit.SECONDS);
        scheduler.shutdown();
    }
    }
    
    These concepts help in managing multithreading efficiently in Java.