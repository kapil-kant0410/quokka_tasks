1. Tables

    ENUM RoleType: ('ROLE_ADMIN', 'ROLE_CUSTOMER', 'ROLE_VIEWER')
    ENUM AddressType: ('HOME', 'WORK', 'OTHER')
    ENUM PaymentType: ('CARD', 'UPI', 'BANK_TRANSFER')
    ENUM OrderStatus: ('PENDING', 'PAID', 'SHIPPED', 'DELIVERED', 'CANCELLED', 'REFUNDED')


    1.1  Users
         Schema: id | name | email | hash_password | role(RoleType) | phone_no | created_at | updated_at

    1.2  User_addresses
         Schema: id (PK) | user_id (FK) | address_type (AddressType) | line1 | line2 | city | state | postal_code | country | is_default | created_at

    1.3  user_payment_methods
         Schema: id (PK) | user_id (FK) | payment_type (PaymentType) | provider | account_number | expiry_date | is_default | created_at

    1.4  Categories
         Schema: id (PK) | name | description | image_url | is_active | created_at | updated_at

    1.5  Products
         Schema: id | name              | description |   brand    | category_id (FK) | seller_id (FK) | image_url | avg_rating | is_active | is_deleted | created_at
                 1     MacBook Pro M1                    MacBook                               -----                   true

    1.6  product_attributes
         Schema: id | product_id(FK) | attribute_name | attribute_value
                  1    1                 RAM         8
                  2    1                 RAM         16
                  3    1               STORAGE       128
                  4    1               STORAGE       256
                  5    1               COLOR         BLACK
                  6    1               COLOR         WHITE  


    1.7  product_variants
         Schema: id | product_id   | sku_code    |    attribute_json                          |    price     | image_url
                  1       1         MBP8-256       {"RAM": "8GB", "Storage": "256GB SSD"}        ₹99,000       ------
                  2       1         MBP16-512      {"RAM": "16GB", "Storage": "512GB SSD"}       ₹199,000       ------

    1.8  product_inventory
        Schema: id | product_variant_id | stock_quantity | reserved_quantity

    1.9  WishList
        Schema: id | user_id (FK) | product_id (FK) 

    2.0  Orders
        Schema: id | user_id (FK) | total_amount | status (OrderStatus) | shipping_address_id (FK) | billing_address_id (FK) | payment_method_id (FK) | created_at

    2.1  Order_items
        Schema: id | order_id (FK) | product_id (FK) | quantity | price | created_at

    2.2  Reviews
        Schema: id | product_id (fk) | user_id (FK) | rating | comment | created_at    

    2.3  Carts
        Schema: id | user_id(FK) | is_active 

    2.4  Cart_items
        Schema: id | cart_id (FK) | product_varient_id (FK) | quantity | price_at_added | added_at      



1. USERS / AUTHENTICATION
   Schema: id | name | email | hash_password | role(RoleType) | phone_no

    1.1  Register User
        POST /api/auth/register

        // Request
        { 
         "name": "John Doe",
         "email": "john@example.com",
         "password": "password123",
         "phoneNo": "1234567890",
         "role": "ROLE_CUSTOMER"
        }

       // Response (201)
       {
       "status": "success",
       "code": 201,
       "message": "User registered successfully",
       "data": { "id": 1, "email": "john@example.com" }
       }

    1.2 Login User
        POST /api/auth/login

       // Request
       {
       "email": "john@example.com",
       "password": "password123"
       }

       // Response (200)
       {
       "status": "success",
       "code": 200,
       "message": "Login successful",
       "data": {
               "accessToken": "jwt_token",
               "refreshToken": "jwt_token",
               "user": { "id": 1, "name": "John", "role": "ROLE_CUSTOMER" }
               }
        }

2. CATEGORIES 

    2.1 Create Category (Admin only)
        POST /api/category/create

        // Request
        { "name": "Electronics", "description": "Phones and gadgets" }

        // Response (201)
        { 
        "status": "success",
        "code": 201,
        "message": "User registered successfully",
        "data": { "id": 1, "name": "xxxxxx","description": "Phones and gadgets"}
        }

    2.2 Get All Categories
        GET /api/category/get-all 

        // Response
        {
        "status": "success",
        "code": 200,
        "message": "Categories retrieved",
        "data": [ {"name": "Electronics"},{"name": "beauty"} ]
        }

3. PRODUCTS

    3.1 Add Product (Seller only)
        POST /api/product/create

        {
        "name": "iPhone 14",
        "quantity": 5,
        "description": "Latest model",
        "price": 999.99,
        "isActive": true,
        "categoryId": 1,
        "imageUrl": "https://cdn.com/img.jpg"
        }

        // Response
        {
        "status": "success",
        "code": 200,
        "message": "Product saved successfully",
        "data": { "id": 1, "name": "iPhone 14", ... }
        }
   
    3.2 Get All Products
        GET /api/product/get-all?page=0&size=10&sortBy=price&order=asc

        // Response
        {
        "status": "success",
        "code": 200,
        "message": "Product saved successfully",
        "data": [{ "id": 1, "name": "iPhone 14", ... },{product}]
        }

    3.3 Get product by id  
        GET /api/product/get-by-id  

        // Response
        {
        "status": "success",
        "code": 200,
        "message": "Product saved successfully",
        "data": { "id": 1, "name": "iPhone 14", ... }
        }

    3.5 Get product with filters
        GET /api/product?name=iphone&categoryId=1&minPrice=500&maxPrice=1500

        {
          "status": "success",
          "code": 200,
          "message": "Products fetched",
          "data": [
            {
              "id": 1,
              "name": "iPhone 14",
              "price": 999.99,
              ...
            }
          ]
        }

    3.4 Update Product (Seller)
        PUT /api/product/update/{product_id}
        only the seller who created this product

        //Request
        {
        "name": "iPhone 14",
        "quantity": 5,
        "description": "Latest model",
        "price": 999.99,
        "isActive": true,
        "categoryId": 1,
        "imageUrl": "https://cdn.com/img.jpg"
        }

        // Response
        {
        "status": "success",
        "code": 200,
        "message": "Product updated successfully",
        "data": { "id": 1, "name": "iPhone 14", ... }
        }

    3.5 Delete Product (Soft Delete)    
        DELETE /api/products/{product_id}

        just set isDeleted=true

        // Response
        {
        "status": "success",
        "code": 200,
        "message": "Product deleted successfully",
        "data": { "id": 1, "name": "iPhone 14", "isDeleted":true ...}
        }

4. CART
  
    4.1 Add to Cart
        POST /api/cart

        // Request
        {
        "productId": 2,
        "quantity": 1
        }

        // Response
        {
        "status": "success",
        "code": 200,
        "message": "Added to cart",
        "data": { product_info , quantity }
        }

    4.2 Get User cart
        Get /api/cart

        // Response
        {
        "status": "success",
        "code": 200,
        "message": "Cart items",
        "data": [{ product_info , quantity },...]
        }

    4.3 Remove Item from cart
        DELETE /api/cart/{itemId}

        // Response
        {
        "status": "success",
        "code": 200,
        "message": "Removed cart item",
        "data": { product_info , quantity }
        }

5. ORDERS

    5.1 Place order
        Post /api/order/checkout

        {
         "user_id":,
         "total_amount",
         "status":,
         "address": "123 Main St",
         "paymentMode": "COD"
        }

        {
                          "status": "success",
                          "code": 201,
                          "message": "Order placed successfully",
                          "data": {
                            "orderId": 99,
                            "totalAmount": 1500,
                            "status": "PLACED",
                            "items": [...]
                          }
        }

    5.2 Cart-to-Order Checkout
        POST /api/order/checkout

        {
        "user_id":,
        "total_amount",
        "status":,
        "address": "123 Main St",
        "paymentMode": "COD"
        }

        {
                  "status": "success",
                  "code": 201,
                  "message": "Order placed successfully",
                  "data": {
                    "orderId": 99,
                    "totalAmount": 1500,
                    "status": "PLACED",
                    "items": [...]
                  }
        }

    5.3 Get my Orders with all items inside that order
        Get /api/order/get-all   

        {
        "orders": [
                  { order_id,total_amount,status,order_items:[...] },
                  { order_id,total_amount,status, order_items:[...] }
                 ]
        } 
     
    5.4 Get order by id with all items inside that order
        Get /api/order/get-order/{order_id}
        only user can get only its orders

        {
            order_id,
            total_amount,
            status
            items:[{},{},{}]
        }

6. ORDER_ITEMS  
    
    6.1 Get all products inside an order by order id
        Get /api/order/get-all-items/{order_id} 

        {
           "id": 12,
           "totalAmount": 299.99,
           "status": "CONFIRMED",
           items: [{
                     "productId": 2,
                     "quantity": 1,
                     "price": 100.00
                   },{
                     "productId": 2,
                     "quantity": 1,
                     "price": 100.00
                     },{
                        "productId": 2,
                        "quantity": 1,
                        "price": 100.00
                       }]
        }

7. REVIEWS 

   7.1 Add review on product
       /api/review/create

       //Request
       {
       "productId": 1,
       "rating": 4,
       "comment": "Very good quality!"
       }

       //Response
       {
       "status": "success",
       "code": 201,
       "message": "Review submitted successfully",
       "data": {
               "id": 10,
               "productId": 1,
               "userId": 5,
               "rating": 4,
               "comment": "Great product, highly recommend!",
               "createdAt": "2025-05-01T14:30:00Z"
              }
       }

    7.2 Get Reviews for a Product
        GET /api/products/{productId}/reviews   

        {
        "status": "success",
        "code": 200,
        "message": "Reviews fetched successfully",
        "data": [
                {
                "id": 10,
                "userId": 5,
                "userName": "John Doe",
                "rating": 4,
                "comment": "Great product!",
                "createdAt": "2025-05-01T14:30:00Z"
                },
                {
                "id": 11,
                "userId": 6,
                "userName": "Alice",
                "rating": 5,
                "comment": "Loved it!",
                "createdAt": "2025-05-01T15:00:00Z"
                }
                ]
        }

    7.3 Update a Review
        PUT /api/reviews/{review_id}
        Only the user who wrote the review 

        {
        "rating": 5,
        "comment": "Updated: even better after more use!"
        }

        {
        "status": "success",
        "code": 200,
        "message": "Review updated successfully",
        "data": {
                "id": 10,
                "productId": 1,
                "userId": 5,
                "rating": 5,
                "comment": "Updated: even better after more use!",
                "createdAt": "2025-05-01T14:30:00Z"
                 }
        }

    7.4 Delete a Review
        DELETE /api/reviews/{review_id}
        Only the user who wrote the review

        {
          "status": "success",
          "code": 200,
          "message": "Review deleted successfully",
          "data": {
            "id": 10,
            "productId": 1,
            "userId": 5,
            "rating": 5,
            "comment": "Updated: even better after more use!",
            "createdAt": "2025-05-01T14:30:00Z"
          }
        }

8. CART

   1. Add to Cart
   POST /api/cart/add

   {
     "productId": 1,
     "quantity": 2
   }

   {
     "status": "success",
     "code": 201,
     "message": "Product added to cart successfully",
     "data": {
       "id": 101,
       "userId": 5,
       "productId": 1,
       "quantity": 2
     }
   }

   2. Get All Cart Items for a User
      GET /api/cart/get-all

   {
     "status": "success",
     "code": 200,
     "message": "Cart items fetched successfully",
     "data": [
       {
         "id": 101,
         "userId": 5,
         "productId": 1,
         "quantity": 2
       },
       {
         "id": 102,
         "userId": 5,
         "productId": 3,
         "quantity": 1
       }
     ]
   }

   3. Update Cart Item Quantity
      PUT /api/cart/{cartItemId}

      {
        "quantity": 4
      }

      {
        "status": "success",
        "code": 200,
        "message": "Cart item updated successfully",
        "data": {
          "id": 101,
          "userId": 5,
          "productId": 1,
          "quantity": 4
        }
      }

   4. Remove Item from Cart
      DELETE /api/cart/{cartItemId}

      {
        "status": "success",
        "code": 200,
        "message": "Cart item removed successfully",
        "data": {
          "id": 101,
          "userId": 5,
          "productId": 1,
          "quantity": 2
        }
      }

   5. Clear Entire Cart
      DELETE /api/cart
      
   {
     "status": "success",
     "code": 200,
     "message": "All cart items cleared successfully",
     "data": []
   }




        

   



     





  

 
         